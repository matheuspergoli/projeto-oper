generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?   @db.Text

  accounts Account[]
  sessions Session[]

  role              UserRole          @default(USER)
  comments          Comment[]
  favoritesComments FavoriteComment[]
  replies           Reply[]
}

model Article {
  id               String    @id @default(cuid())
  articleReference String    @unique
  comments         Comment[]
}

model Comment {
  id     String @id @default(cuid())
  text   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String?

  favoritesComments FavoriteComment[]
  replies           Reply[]

  @@index([articleId])
  @@index([userId])
}

model Reply {
  id        String  @id @default(cuid())
  text      String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  favoritesComments FavoriteComment[]

  @@index([userId])
  @@index([commentId])
}

model FavoriteComment {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  reply     Reply?  @relation(fields: [replyId], references: [id], onDelete: Cascade)
  replyId   String?

  @@index([userId])
  @@index([commentId])
  @@index([replyId])
}
